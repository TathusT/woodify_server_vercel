// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  u_id Int @id @default(autoincrement())
  line_id String @unique
  firstname String
  lastname String
  email String @unique
  phone String @unique
  image String
  role roleEnum
  create_at DateTime
  update_at DateTime
  wood_info Wood_info[]
  updated_wood_info Wood_info[] @relation("updater")
  created_manuals Manual[] @relation("created_manuals")
  updated_manuals Manual[] @relation("updated_manuals")
  created_classify Classify[] @relation("created_classify")
  verify_classify Classify[] @relation("verify_classify")
}

enum roleEnum {
  USER
  EXPERT
  ADMIN
}

model Wood_info {
  w_id                     Int          @id @default(autoincrement())
  common_name              String[]
  eng_name                 String[]
  botanical_name           String
  pedigree                 String
  place_of_origin          String
  wood_characteristics     String
  anatomical_characteristics String
  other                    String
  status                   Boolean
  create_at                DateTime
  update_at                DateTime
  create_by               Int
  update_by               Int
  wood_image              Wood_Image[]
  user                    Users       @relation(fields: [create_by], references: [u_id])
  updater                 Users       @relation("updater", fields: [update_by], references: [u_id])
}

model Wood_Image{
  wi_id Int @id @default(autoincrement())
  w_id Int
  path String
  wood_info Wood_info @relation(fields: [w_id], references: [w_id])
}

model Manual{
  m_id Int @id @default(autoincrement())
  topic String
  description String
  status Boolean
  image String
  create_at DateTime
  update_at DateTime
  create_by Int
  update_by Int
  creator            Users    @relation("created_manuals", fields: [create_by], references: [u_id])
  updater            Users    @relation("updated_manuals", fields: [update_by], references: [u_id])
}

model Classify{
  c_id Int @id @default(autoincrement())
  status Boolean
  status_verify StatusVerifyEnum
  select_result String
  result Json
  create_at DateTime
  create_by Int
  verify_by Int
  creator            Users    @relation("created_classify", fields: [create_by], references: [u_id])
  verifitor            Users    @relation("verify_classify", fields: [verify_by], references: [u_id])
  notes Note[]
}

enum StatusVerifyEnum {
  WAITING_FOR_VERIFICATION
  PASSED_CERTIFICATION
  FAILED_CERTIFICATION
}

model Note{
  n_id Int @id @default(autoincrement())
  c_id Int
  change_result Boolean
  read_status Boolean
  description String
  create_at DateTime
  create_by Int
  classify Classify @relation(fields: [c_id], references: [c_id])
}



